% Temporarily adding facts(also some rules), which ideally would be extracted from particular models

% Auxiliary rules (leaf & descendent) --- see the simplification_general file.

%Critical Security Goal Identification rules --- see the simplification_general file.

%Asset Type Applicability rules --- see the simplification_general file.


%Application layer applicability rules

involve_data(T,AS):- call(C1,C2,T,AS).
involve_data(T,AS):- exec(C,T,AS).

involve_component(T,C1) :- call(C1,C2,T,AS).
involve_component(T,C2) :- call(C1,C2,T,AS).
involve_component(T,C) :- exec(C,T,AS).

%old rule1
%is_applicable(SG) :- call(C1, C2, T, AS), sec_goal(SG), has_properties(SG, _, data_confidentiality, AS, T), not is_not_applicable(SG).
%is_applicable(SG) :- call(T1, T2, _, AS), sec_goal(SG), has_properties(SG, _, data_integrity, AS, T2), not is_not_applicable(SG).
%old rule2
%is_applicable(SG) :- call(T1, T2, _, AS), sec_goal(SG), has_properties(SG, _, data_confidentiality, AS, T1), not is_not_applicable(SG).
%old rule3
%is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, application_integrity, AS, T1), has(AS, T1), not is_not_applicable(SG).
%is_applicable(SG) :- sec_goal(SG), has_properties(SG, _, application_availability, AS, T1), has(AS, T1), not is_not_applicable(SG).

%new rule 1
is_applicable(SG) :- involve_data(T, AS), sec_goal(SG), has_properties(SG, _, data_confidentiality, AS, T), not is_not_applicable(SG).
is_applicable(SG) :- involve_data(T, AS), sec_goal(SG), has_properties(SG, _, data_integraty, AS, T), not is_not_applicable(SG).

%new rule 2
is_applicable(SG) :- involve_component(T, AS), sec_goal(SG), has_properties(SG, _, application_integrity, AS, T), not is_not_applicable(SG).
is_applicable(SG) :- involve_component(T, AS), sec_goal(SG), has_properties(SG, _, application_availability, AS, T), not is_not_applicable(SG).

%Application layer potential threat analysis rules. We suppose only the dependency causes potential damage.
poss_impair(A, SG) :- sec_goal(SG), has_properties(SG, _, data_confidentiality, AS, T1), call(T2, T1, _, AS), has(APP, T2), use(A, APP). 
poss_impair(A, SG) :- sec_goal(SG), has_properties(SG, _, data_confidentiality, AS, T), has(APP, T), use(A, APP). 
poss_impair(A, SG) :- sec_goal(SG), has_properties(SG, _, data_integrity, AS, T), has(APP, T), use(A, APP). 
poss_impair(A, SG) :- sec_goal(SG), has_properties(SG, _, data_confidentiality, AS, T), has(APP, T), maintain(A, APP). 
poss_impair(A, SG) :- sec_goal(SG), has_properties(SG, _, data_integrity, AS, T), has(APP, T), maintain(A, APP).
poss_impair(A, SG) :- sec_goal(SG), has_properties(SG, _, application_integrity, APP, T), maintain(A, APP).
poss_impair(A, SG) :- sec_goal(SG), has_properties(SG, _, data_confidentiality, AS, T), has(APP, T), own(A, APP).
poss_impair(A, SG) :- sec_goal(SG), has_properties(SG, _, data_integrity, AS, T), has(APP, T), own(A, APP).
poss_impair(A, SG) :- sec_goal(SG), has_properties(SG, _, application_integrity, APP, T), own(A, APP).
poss_impair(A, SG) :- sec_goal(SG), has_properties(SG, _, application_availability, APP, T), own(A, APP).
