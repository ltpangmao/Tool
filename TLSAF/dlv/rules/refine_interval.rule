

%auxiliary rule
interval(G) :- goal(G).
interval(T) :- task(T).


non_leaf(R1) :- and_refine(R2, R1).
non_leaf(R1) :- refine(R2, R1).
non_leaf(R1) :- operationalize(R2, R1).
non_leaf(R1) :- make(R2, R1).
non_leaf(R1) :- help(R2, R1).
non_leaf(R1) :- break(R2, R1).
non_leaf(R1) :- hurt(R2, R1).
non_leaf(R1) :- support(R2, R1).


% Here actually no restrictions are put on the type of INT, although they could be.
and_refined_sec_goal(IMP, SA, AS, INT2, SG) :- has_properties(SG, IMP, SA, AS, INT1), and_refine(INT2, INT1), not non_leaf(SG), sec_goal(SG), interval(INT2), interval(INT1), INT1<>INT2.
and_refined_sec_goal(IMP, SA, AS, INT2, SG) :- has_properties(SG, IMP, SA, AS, INT1), refine(INT2, INT1), not non_leaf(SG), sec_goal(SG), interval(INT2), interval(INT1), INT1<>INT2.
and_refined_sec_goal(IMP, SA, AS, INT2, SG) :- has_properties(SG, IMP, SA, AS, INT1), operationalize(INT2, INT1), not non_leaf(SG), sec_goal(SG), interval(INT2), interval(INT1), INT1<>INT2.